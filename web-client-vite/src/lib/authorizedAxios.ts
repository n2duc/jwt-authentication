import axios from 'axios'
import type { AxiosInstance, AxiosError, AxiosResponse, AxiosRequestHeaders, InternalAxiosRequestConfig, AxiosRequestConfig } from 'axios'
import toast from 'react-hot-toast'
import { handleLogoutAPI, refreshTokenAPI } from '../apis'

interface RefreshTokenResponse {
  data?: {
    accessToken: string;
  }
}

interface CustomAxiosError extends AxiosError {
  config: AxiosRequestConfig & { headers: AxiosRequestHeaders };
  response?: AxiosResponse;
}

const logOnDev = (message: string) => {
  if (import.meta.env.MODE === "development") {
    console.log(message);
  }
};

const onResponse = (response: AxiosResponse): AxiosResponse => {
  const { method, url } = response.config
  const { status } = response

  logOnDev(`[${method?.toUpperCase()}] ${url} - ${status}`)

  return response
}

const onRequest = (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {
  const { method, url } = config

  // TH2: Tr∆∞·ªùng h·ª£p l∆∞u accessToken v√†o localStorage v√† mu·ªën th√™m v√†o header c·ªßa m·ªói request
  // const accessToken = localStorage.getItem('accessToken')
  // if (accessToken) {
  //   // Bearer Token: C·∫ßn th√™m Bearer tr∆∞·ªõc accessToken ƒë·ªÉ tu√¢n theo chu·∫©n OAuth2 trong vi·ªác x√°c ƒë·ªãnh lo·∫°i token ƒëang s·ª≠ d·ª•ng
  //   // Bearer l√† ƒë·ªãnh nghƒ©a lo·∫°i token d√†nh cho vi·ªác x√°c th·ª±c v√† ·ªßy quy·ªÅn. C√°c lo·∫°i token c·∫ßn kh√°c nh∆∞: Basic token, Digest token, ...
  //   config.headers.Authorization = `Bearer ${accessToken}`
  // }

  logOnDev(`[${method?.toUpperCase()}] ${url}`)

  if (method === 'get') {
    config.timeout = 1000 * 60 * 10
  }

  return config
}

let refreshTokenPromise: Promise<RefreshTokenResponse | void> | null = null;

const onErrorResponse = async (error: CustomAxiosError) => {
  if (axios.isAxiosError(error)) {
    const { message } = error
    const { method, url } = error.config as AxiosRequestConfig

    logOnDev(`[${method?.toUpperCase()}] ${url} - ${message}`)

    // X·ª≠ l√Ω refreshToken t·ª± ƒë·ªông khi accessToken h·∫øt h·∫°n
    // API tr·∫£ v·ªÅ l·ªói 401 th√¨ g·ªçi API Logout
    if (error.response?.status === 401) {
      await handleLogoutAPI()
      location.href = '/login'
      return
    }

    // N·∫øu API tr·∫£ v·ªÅ l·ªói 410 th√¨ g·ªçi api refresh token ƒë·ªÉ l·∫°i m·ªõi l·∫°i accessToken
    const originalRequest = error.config // L·∫•y c√°c request API ƒëang b·ªã l·ªói th√¥ng qua error.config
    if (error.response?.status === 410 && originalRequest) {

      if (!refreshTokenPromise) {
        // L·∫•y refreshToken t·ª´ localStorage (TH d√πng localStorage)
        const refreshToken = localStorage.getItem('refreshToken')
        // G·ªçi API refresh token ƒë·ªÉ l·∫•y l·∫°i accessToken m·ªõi
        refreshTokenPromise = refreshTokenAPI(refreshToken)
          .then((res: RefreshTokenResponse) => {
            // D√πng cho TH d√πng localStorage
            // const { accessToken } = res.data
            // localStorage.setItem('accessToken', accessToken)
            // axiosInstance.defaults.headers.Authorization = `Bearer ${accessToken}`
            console.log(res.data)

            // D√πng cho TH Cookie: accessToken ƒë√£ ƒë∆∞·ª£c update l·∫°i trong Cookie r·ªìi (·ªü ph√≠a BE) n√™n kh√¥ng c·∫ßn x·ª≠ l√Ω t√°c v·ª• g√¨ c·∫£

          })
          .catch((_error: AxiosError) => {
            // N·∫øu nh·∫≠n l·ªói t·ª´ API refreshToken th√¨ logout lu√¥n
            handleLogoutAPI().then(() => {
              location.href = '/login'
            })
            return Promise.reject(_error)
          })
          .finally(() => {
            // D√π API refreshToken c√≥ th√†nh c√¥ng hay l·ªói th√¨ v·∫´n lu√¥n g√°n l·∫°i c√°i refreshTokenPromise v·ªÅ null nh∆∞ ban ƒë·∫ßu
            refreshTokenPromise = null
          })
      }

      // Cu·ªëi c√πng m·ªõi return refreshTokenPromise trong tr∆∞·ªùng h·ª£p success ·ªü ƒë√¢y
      return refreshTokenPromise.then(() => {
        // return l·∫°i axios instance c·ªßa ch√∫ng ta k·∫øt h·ª£p c√°i originalConfig ƒë·ªÉ g·ªçi l·∫°i nh∆∞ng api ban ƒë·∫ßu b·ªã l·ªói
        return axiosInstance(originalRequest)
      })
    }

    if (error.response?.status !== 410) {
      toast.error(`üö® [API] | Error ${error.response?.data?.message || message}`);
    }
  } else {
    const errorMessage = (error as Error)?.message || 'Unknown error';
    logOnDev(`üö® [API] | Error ${errorMessage}`);
  }

  return Promise.reject(error);
}

const axiosInstance: AxiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_URL as string,
  headers: {
    'Content-type': 'application/json',
  },
  // withCredentials: true - cho ph√©p g·ª≠i cookie k√®m theo request l√™n server (ph·ª•c v·ª• tr∆∞·ªùng h·ª£p s·ªß d·ª•ng JWT theo c∆° ch·∫ø httpOnly Cookie)
  // TH1: D√πng cookie ƒë·ªÉ l∆∞u tr·ªØ accessToken v√† refreshToken
  withCredentials: true,
  // Th·ªùi gian ch·ªù t·ªëi ƒëa khi g·ª≠i request l√™n server
  timeout: 1000 * 60 * 10,
})

/**
 * C·∫•u h√¨nh Interceptors cho Axios Instance
 */
// Add a request interceptor: Can thi·ªáp v√†o request tr∆∞·ªõc khi n√≥ ƒë∆∞·ª£c g·ª≠i ƒëi
axiosInstance.interceptors.request.use(onRequest, onErrorResponse)
// Add a response interceptor: Can thi·ªáp v√†o response tr∆∞·ªõc khi n√≥ ƒë∆∞·ª£c tr·∫£ v·ªÅ cho ph√≠a Client
axiosInstance.interceptors.response.use(onResponse, onErrorResponse)

export default axiosInstance